// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Anime {
  id              Int       @id @default(autoincrement())
  title           String
  description     String
  duration        Int?      @default(24)
  type            String
  studios         String
  date_aired      DateTime
  status          String
  img_url         String
  total_episodes  Int?
  season          Int        @default(1)
  avgRating       Float?     @default(0.0)
  totalRatings    Int?       @default(0)
  date_finished   DateTime?
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  episodes        Episode[]
  Message         Message[]
  genres          AnimeGenre[]
  ratings         Rating[]
}

model Episode {
  id            Int      @id @default(autoincrement())
  title         String
  episode_num   Int
  release_date  DateTime?
  animeId       Int
  anime         Anime    @relation(fields: [animeId], references: [id])
  Message   Message[]
}

model Genre {
  id           Int     @id @default(autoincrement())
  name         String  @unique
  created_at   DateTime  @default(now())
  animes       AnimeGenre[]
}

model AnimeGenre {
  id       Int    @id @default(autoincrement())
  animeId  Int
  genreId  Int

  anime    Anime  @relation(fields: [animeId], references: [id], onDelete: Cascade)
  genre    Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@unique([animeId, genreId], name: "genreId_animeId")
}

model Rating {
  id        Int      @id @default(autoincrement())
  anime     Anime    @relation(fields: [animeId], references: [id])
  animeId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  score     Float
  createdAt DateTime @default(now())

  @@unique([animeId, userId])
}

model User {
  id                Int      @id @default(autoincrement())
  username          String   @unique
  email             String   @unique
  password          String
  profile_imgs      String[] @default([])
  lastProfilePictureUpdate DateTime?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  admin             Admin?
  Message           Message[]
  MessageLike       MessageLike[]
  MessageReport     MessageReport[]
  Rating            Rating[]
}

model Admin {
  id            Int      @id @default(autoincrement())
  user_id       Int      @unique
  user          User     @relation(fields: [user_id], references: [id])
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Message {
  id            Int      @id @default(autoincrement())
  user_id       Int  
  anime_id      Int?
  episode_id    Int?
  text          String
  parent_id     Int?
  created_at    DateTime  @default(now())
  user          User      @relation(fields: [user_id], references: [id])
  anime         Anime?    @relation(fields: [anime_id], references: [id])
  episode       Episode?  @relation(fields: [episode_id], references: [id])
  parent        Message?  @relation("MessageReplies", fields: [parent_id], references: [id])
  replies       Message[] @relation("MessageReplies")
  MessageLike   MessageLike[]
  MessageReport MessageReport[]
}

model MessageLike {
  id            Int       @id @default(autoincrement())
  message_id    Int
  user_id       Int
  created_at    DateTime  @default(now())
  message       Message   @relation(fields: [message_id], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([message_id, user_id])
}

model MessageReport {
  id            Int       @id @default(autoincrement())
  message_id    Int
  user_id       Int
  description   String
  reported_at   DateTime  @default(now())
  message       Message   @relation(fields: [message_id], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([message_id, user_id])
}